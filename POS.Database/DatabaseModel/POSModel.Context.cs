//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS.Database.DatabaseModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POSEntities : DbContext
    {
        public POSEntities()
            : base("name=POSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClosingInventoryDetail> ClosingInventoryDetails { get; set; }
        public virtual DbSet<ClosingInventoryHead> ClosingInventoryHeads { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Floor> Floors { get; set; }
        public virtual DbSet<FloorTable> FloorTables { get; set; }
        public virtual DbSet<IssueToLocationDetail> IssueToLocationDetails { get; set; }
        public virtual DbSet<IssueToLocationHead> IssueToLocationHeads { get; set; }
        public virtual DbSet<ItemGroup> ItemGroups { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<JobCardDetail> JobCardDetails { get; set; }
        public virtual DbSet<JobCardHead> JobCardHeads { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MainMenu> MainMenus { get; set; }
        public virtual DbSet<OpeningDetail> OpeningDetails { get; set; }
        public virtual DbSet<OpeningHead> OpeningHeads { get; set; }
        public virtual DbSet<OrderFeedback> OrderFeedbacks { get; set; }
        public virtual DbSet<OrderFeedbackStatus> OrderFeedbackStatuses { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderTableHistory> OrderTableHistories { get; set; }
        public virtual DbSet<OrderType> OrderTypes { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PrintInfo> PrintInfoes { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<ReturnToVendorDetail> ReturnToVendorDetails { get; set; }
        public virtual DbSet<ReturnToVendorHead> ReturnToVendorHeads { get; set; }
        public virtual DbSet<ReturnToWarehouseDetail> ReturnToWarehouseDetails { get; set; }
        public virtual DbSet<ReturnToWarehouseHead> ReturnToWarehouseHeads { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<ShopStatus> ShopStatuses { get; set; }
        public virtual DbSet<StaffFoodDetail> StaffFoodDetails { get; set; }
        public virtual DbSet<StaffFoodHead> StaffFoodHeads { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UserRight> UserRights { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<VehicleJobCard> VehicleJobCards { get; set; }
        public virtual DbSet<VendorPayment> VendorPayments { get; set; }
        public virtual DbSet<VendorPaymentType> VendorPaymentTypes { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorToWarehouseDetail> VendorToWarehouseDetails { get; set; }
        public virtual DbSet<VendorToWarehouseHead> VendorToWarehouseHeads { get; set; }
        public virtual DbSet<WastageDetail> WastageDetails { get; set; }
        public virtual DbSet<WastageHead> WastageHeads { get; set; }
        public virtual DbSet<QuotationDetail> QuotationDetails { get; set; }
        public virtual DbSet<QuotationHead> QuotationHeads { get; set; }
    
        [DbFunction("POSEntities", "fn_InventoryBal")]
        public virtual IQueryable<fn_InventoryBal_Result> fn_InventoryBal(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_InventoryBal_Result>("[POSEntities].[fn_InventoryBal](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_InventoryBal_Simple")]
        public virtual IQueryable<fn_InventoryBal_Simple_Result> fn_InventoryBal_Simple(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_InventoryBal_Simple_Result>("[POSEntities].[fn_InventoryBal_Simple](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_ItemsStockInHand")]
        public virtual IQueryable<fn_ItemsStockInHand_Result> fn_ItemsStockInHand(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ItemsStockInHand_Result>("[POSEntities].[fn_ItemsStockInHand](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_ItemsStockInHandWareHouse")]
        public virtual IQueryable<fn_ItemsStockInHandWareHouse_Result> fn_ItemsStockInHandWareHouse(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ItemsStockInHandWareHouse_Result>("[POSEntities].[fn_ItemsStockInHandWareHouse](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_ReportViewStockinhand_Department")]
        public virtual IQueryable<fn_ReportViewStockinhand_Department_Result> fn_ReportViewStockinhand_Department(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ReportViewStockinhand_Department_Result>("[POSEntities].[fn_ReportViewStockinhand_Department](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_ReportViewStockinhand_SimpleDept")]
        public virtual IQueryable<fn_ReportViewStockinhand_SimpleDept_Result> fn_ReportViewStockinhand_SimpleDept(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ReportViewStockinhand_SimpleDept_Result>("[POSEntities].[fn_ReportViewStockinhand_SimpleDept](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_ReportViewStockinhand_SimpleWH")]
        public virtual IQueryable<fn_ReportViewStockinhand_SimpleWH_Result> fn_ReportViewStockinhand_SimpleWH(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ReportViewStockinhand_SimpleWH_Result>("[POSEntities].[fn_ReportViewStockinhand_SimpleWH](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_ReportViewStockinhand_WareHouse")]
        public virtual IQueryable<fn_ReportViewStockinhand_WareHouse_Result> fn_ReportViewStockinhand_WareHouse(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ReportViewStockinhand_WareHouse_Result>("[POSEntities].[fn_ReportViewStockinhand_WareHouse](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("POSEntities", "fn_VenderPaymentLedger")]
        public virtual IQueryable<fn_VenderPaymentLedger_Result> fn_VenderPaymentLedger(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_VenderPaymentLedger_Result>("[POSEntities].[fn_VenderPaymentLedger](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Comsumption_Result> Comsumption(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Comsumption_Result>("Comsumption", todateParameter, fromdateParameter);
        }
    
        public virtual int DailySell()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailySell");
        }
    
        public virtual ObjectResult<GetHistoryCarVoucher_Result> GetHistoryCarVoucher(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHistoryCarVoucher_Result>("GetHistoryCarVoucher", iDParameter);
        }
    
        public virtual ObjectResult<IssueToDeptment_Result> IssueToDeptment(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate, Nullable<int> itemId, Nullable<int> categoriesID)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var categoriesIDParameter = categoriesID.HasValue ?
                new ObjectParameter("CategoriesID", categoriesID) :
                new ObjectParameter("CategoriesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IssueToDeptment_Result>("IssueToDeptment", todateParameter, fromdateParameter, itemIdParameter, categoriesIDParameter);
        }
    
        public virtual ObjectResult<IussToWareHouseVoucher_Result> IussToWareHouseVoucher(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IussToWareHouseVoucher_Result>("IussToWareHouseVoucher", iDParameter);
        }
    
        public virtual ObjectResult<JobCard_Result> JobCard(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobCard_Result>("JobCard", iDParameter);
        }
    
        public virtual int oderVoucher(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("oderVoucher", iDParameter);
        }
    
        public virtual ObjectResult<ReturnToVendor_Result> ReturnToVendor(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReturnToVendor_Result>("ReturnToVendor", todateParameter, fromdateParameter);
        }
    
        public virtual ObjectResult<ReturnToWareHouse_Result> ReturnToWareHouse(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate, Nullable<int> itemID, Nullable<int> categoryID)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReturnToWareHouse_Result>("ReturnToWareHouse", todateParameter, fromdateParameter, itemIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<ReturnVenderSummary_Result> ReturnVenderSummary(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReturnVenderSummary_Result>("ReturnVenderSummary", todateParameter, fromdateParameter);
        }
    
        public virtual ObjectResult<ReturnVenderTowareHouseSummary_Result> ReturnVenderTowareHouseSummary(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReturnVenderTowareHouseSummary_Result>("ReturnVenderTowareHouseSummary", todateParameter, fromdateParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> sp_DailyP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_DailyP");
        }
    
        public virtual ObjectResult<Nullable<double>> sp_GeDailyP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_GeDailyP");
        }
    
        public virtual ObjectResult<sp_GetDasbroadDaily_Result> sp_GetDasbroadDaily()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDasbroadDaily_Result>("sp_GetDasbroadDaily");
        }
    
        public virtual ObjectResult<VenderPaymentLedgerSummary_Result> VenderPaymentLedgerSummary(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate, Nullable<int> venderId)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var venderIdParameter = venderId.HasValue ?
                new ObjectParameter("VenderId", venderId) :
                new ObjectParameter("VenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VenderPaymentLedgerSummary_Result>("VenderPaymentLedgerSummary", todateParameter, fromdateParameter, venderIdParameter);
        }
    
        public virtual ObjectResult<VenderToWarhouse_Result> VenderToWarhouse(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate, Nullable<int> itemid, Nullable<int> venderID)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var venderIDParameter = venderID.HasValue ?
                new ObjectParameter("VenderID", venderID) :
                new ObjectParameter("VenderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VenderToWarhouse_Result>("VenderToWarhouse", todateParameter, fromdateParameter, itemidParameter, venderIDParameter);
        }
    
        public virtual ObjectResult<VendorToWareHouseVoucher_Result> VendorToWareHouseVoucher(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorToWareHouseVoucher_Result>("VendorToWareHouseVoucher", iDParameter);
        }
    
        public virtual ObjectResult<WastageRepot_Result> WastageRepot(Nullable<System.DateTime> todate, Nullable<System.DateTime> fromdate, Nullable<int> itemid)
        {
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WastageRepot_Result>("WastageRepot", todateParameter, fromdateParameter, itemidParameter);
        }
    
        public virtual ObjectResult<QuotationVoucher_Result> QuotationVoucher(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationVoucher_Result>("QuotationVoucher", iDParameter);
        }
    }
}
